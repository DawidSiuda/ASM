
;; Function main (main, funcdef_no=0, decl_uid=1868, cgraph_uid=0, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 5:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =Yf*f  (1) Yf*fm {*movsf_internal} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =<  (1) f {*pushsf} (sp_off=-4)
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =Yf*f  (1) Yf*fm {*movsf_internal} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =<  (1) f {*pushsf} (sp_off=-8)
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =Yf*f  (1) Yf*fm {*movsf_internal} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =<  (1) f {*pushsf} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 14:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=1,overall=14,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            alt=3,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=8: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=9: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            alt=11: Bad operand -- refuse
            Staticly defined alt reject+=600
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=13,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=14: Bad operand -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
      Creating newreg=98, assigning class NO_REGS to secondary r98
   15: r98:SF=st:SF
      REG_DEAD st:SF
    Inserting the sec. move after:
   38: r94:SF=r98:SF

            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=15,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=1,overall=20,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
          alt=0,overall=23,losers=3,rld_nregs=2
            1 Costly loser: reject++
          alt=1,overall=13,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 16:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =f  (1) fm {*extendsfdf2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =<  (1) f {*pushdf} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 33: point = 0, n_alt = -1
   Insn 32: point = 0, n_alt = -2
   Insn 28: point = 1, n_alt = -2
   Insn 25: point = 3, n_alt = 0
   Insn 24: point = 4, n_alt = 0
   Insn 23: point = 4, n_alt = 0
   Insn 22: point = 4, n_alt = -2
   Insn 21: point = 5, n_alt = 0
   Insn 20: point = 6, n_alt = 0
   Insn 19: point = 7, n_alt = 0
   Insn 18: point = 8, n_alt = 0
   Insn 17: point = 8, n_alt = 0
   Insn 16: point = 9, n_alt = 4
   Insn 38: point = 10, n_alt = 3
	Hard reg 0 is preferable by r98 with profit 1
   Insn 15: point = 12, n_alt = -1
	Hard reg 0 is preferable by r98 with profit 1
	Hard reg 8 is preferable by r98 with profit 1
   Insn 14: point = 13, n_alt = 0
   Insn 13: point = 13, n_alt = 0
   Insn 12: point = 13, n_alt = -2
   Insn 11: point = 13, n_alt = 0
   Insn 10: point = 14, n_alt = 0
   Insn 9: point = 15, n_alt = 0
   Insn 8: point = 16, n_alt = 0
   Insn 7: point = 17, n_alt = 0
   Insn 6: point = 18, n_alt = 0
   Insn 5: point = 19, n_alt = 0
   Insn 36: point = 19, n_alt = 0
 r87: [4..19]
 r88: [7..8]
 r89: [2..3]
 r90: [0..1]
 r91: [17..18]
 r92: [15..16]
 r93: [13..14]
 r94: [9..10]
 r95: [5..6]
 r98: [11..12]
Compressing live ranges: from 20 to 18 - 90%
Ranges after the compression:
 r87: [4..17]
 r88: [6..7]
 r89: [2..3]
 r90: [0..1]
 r91: [16..17]
 r92: [14..15]
 r93: [12..13]
 r94: [8..9]
 r95: [4..5]
 r98: [10..11]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
  Slot 0 regnos (width = 0):	 98
Changing spilled pseudos to memory in insn #15
Changing spilled pseudos to memory in insn #38
	   Spilling non-eliminable hard regs: 6

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 3 for insn #38
            Staticly defined alt reject+=6
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=611,losers=1,rld_nregs=1
            1 Costly set: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) Yf*f {*movsf_internal}
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 36
changing reg in insn 22
changing reg in insn 20
changing reg in insn 12
changing reg in insn 10
changing reg in insn 8
changing reg in insn 6
changing reg in insn 17
changing reg in insn 19
changing reg in insn 25
changing reg in insn 28
changing reg in insn 28
changing reg in insn 32
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 16
changing reg in insn 20
changing reg in insn 21
deleting insn with uid = 12.
deleting insn with uid = 22.
deleting insn with uid = 28.
starting the processing of deferred insns
ending the processing of deferred insns


main

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 8 [st] 17 [flags]
;;  ref usage 	r0={7d,5u} r1={3d} r2={3d} r3={1d,6u} r6={1d,6u} r7={10d,17u} r8={6d,5u} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={7d} r18={2d} r19={2d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 217{177d,40u,0e} in 23{21 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 95
(note 3 1 36 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 36 3 2 2 (parallel [
            (set (reg:SI 3 bx [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 697 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 36 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":8 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 6 5 7 2 (set (reg:SF 8 st [91])
        (mem/u/c:SF (plus:SI (reg:SI 3 bx [87])
                (const:SI (unspec:SI [
                            (symbol_ref/u:SI ("*.LC0") [flags 0x2])
                        ] UNSPEC_GOTOFF))) [1  S4 A32])) "main.c":8 127 {*movsf_internal}
     (nil))
(insn 7 6 8 2 (set (mem:SF (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SF 8 st [91])) "main.c":8 123 {*pushsf}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 8 7 9 2 (set (reg:SF 8 st [92])
        (mem/u/c:SF (plus:SI (reg:SI 3 bx [87])
                (const:SI (unspec:SI [
                            (symbol_ref/u:SI ("*.LC1") [flags 0x2])
                        ] UNSPEC_GOTOFF))) [1  S4 A32])) "main.c":8 127 {*movsf_internal}
     (nil))
(insn 9 8 10 2 (set (mem:SF (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SF 8 st [92])) "main.c":8 123 {*pushsf}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 10 9 11 2 (set (reg:SF 8 st [93])
        (mem/u/c:SF (plus:SI (reg:SI 3 bx [87])
                (const:SI (unspec:SI [
                            (symbol_ref/u:SI ("*.LC2") [flags 0x2])
                        ] UNSPEC_GOTOFF))) [1  S4 A32])) "main.c":8 127 {*movsf_internal}
     (nil))
(insn 11 10 13 2 (set (mem:SF (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SF 8 st [93])) "main.c":8 123 {*pushsf}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 13 11 14 2 (set (reg:SF 8 st)
        (call (mem:QI (symbol_ref:SI ("fun") [flags 0x41]  <function_decl 0x7fe4a1e04900 fun>) [0 fun S1 A8])
            (const_int 16 [0x10]))) "main.c":8 675 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 14 13 15 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":8 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 15 14 38 2 (set (mem/c:SF (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [4 %sfp+-20 S4 A32])
        (reg:SF 8 st)) "main.c":8 127 {*movsf_internal}
     (nil))
(insn 38 15 16 2 (set (reg:SF 0 ax [94])
        (mem/c:SF (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [4 %sfp+-20 S4 A32])) "main.c":8 127 {*movsf_internal}
     (nil))
(insn 16 38 17 2 (set (mem/c:SF (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 out+0 S4 A32])
        (reg:SF 0 ax [94])) "main.c":8 127 {*movsf_internal}
     (nil))
(insn 17 16 18 2 (set (reg:DF 8 st [orig:88 _1 ] [88])
        (float_extend:DF (mem/c:SF (plus:SI (reg/f:SI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [1 out+0 S4 A32]))) "main.c":10 154 {*extendsfdf2}
     (nil))
(insn 18 17 19 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":10 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 19 18 20 2 (set (mem:DF (pre_dec:SI (reg/f:SI 7 sp)) [2  S8 A64])
        (reg:DF 8 st [orig:88 _1 ] [88])) "main.c":10 121 {*pushdf}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 20 19 21 2 (set (reg/f:SI 0 ax [95])
        (plus:SI (reg:SI 3 bx [87])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC3") [flags 0x2]  <var_decl 0x7fe4a1dc4cf0 *.LC3>)
                    ] UNSPEC_GOTOFF)))) "main.c":10 213 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC3") [flags 0x2]  <var_decl 0x7fe4a1dc4cf0 *.LC3>)
        (nil)))
(insn 21 20 23 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [3  S4 A32])
        (reg/f:SI 0 ax [95])) "main.c":10 58 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 23 21 24 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x41]  <function_decl 0x7fe4a1d51f00 printf>) [0 __builtin_printf S1 A8])
            (const_int 16 [0x10]))) "main.c":10 675 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 24 23 25 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":10 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 25 24 32 2 (set (reg:SI 0 ax [orig:89 _6 ] [89])
        (const_int 0 [0])) "main.c":12 82 {*movsi_internal}
     (nil))
(insn 32 25 33 2 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:90 <retval> ] [90])) "main.c":13 82 {*movsi_internal}
     (nil))
(insn 33 32 37 2 (use (reg/i:SI 0 ax)) "main.c":13 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 37 33 0 NOTE_INSN_DELETED)
